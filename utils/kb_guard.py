# -*- coding: utf-8 -*-
"""
–ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ ¬´–≥–ª—É—Ö–∏—Ö –∫—É—Ç—ñ–≤¬ª –¥–ª—è aiogram 3.x.

–î–∞—î:
- safe_edit_or_send(bot, chat_id, text, *, message_id=None, parse_mode=None, reply_markup=None, disable_web_page_preview=None)
    –ë–µ–∑–ø–µ—á–Ω–æ —Ä–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ —è–∫—â–æ –Ω–µ –º–æ–∂–Ω–∞ ‚Äî —à–ª–µ –Ω–æ–≤–µ. –ì–∞—Ä–∞–Ω—Ç—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.

- install_kb_audit(dp)
    –ü—ñ–¥–∫–ª—é—á–∞—î middleware, —è–∫–∏–π:
      * –ª–æ–≥—É–≤–∞—Ç–∏–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏;
      * –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—Ç–∏–º–µ fallback-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.

- @require_kb –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä (NOP –¥–ª—è v3, –∑–∞–ª–∏—à–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∫–æ–¥—É)
"""

from __future__ import annotations

import logging
from dataclasses import dataclass
from typing import Optional

from aiogram import BaseMiddleware, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.types import CallbackQuery

logger = logging.getLogger(__name__)


# ---------------------------- Fallback-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ -----------------------------

def _fallback_kb() -> InlineKeyboardMarkup:
    """
    –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞, —â–æ–± —é–∑–µ—Ä –Ω–µ –∑–∞—Å—Ç—Ä—è–≥:
      - –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
      - –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–≥–æ —Å–ø–∏—Å–∫—É
    –ü—ñ–¥–ª–∞—à—Ç—É–π –ø—ñ–¥ —Å–≤–æ—ó callback-–∏, —è–∫—â–æ –≤–æ–Ω–∏ —ñ–Ω—à—ñ.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="main:back")],
        [InlineKeyboardButton(text="üì¶ –ú—ñ–π —Å–ø–∏—Å–æ–∫", callback_data="main:my_list")],
    ])
    return kb


# ------------------------------- safe_edit_or_send ----------------------------

async def safe_edit_or_send(
    bot,
    chat_id: int | str,
    text: str,
    *,
    message_id: Optional[int] = None,
    parse_mode: Optional[str] = None,
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    disable_web_page_preview: Optional[bool] = None,
):
    """
    –ù–∞–¥—ñ–π–Ω–æ –æ–Ω–æ–≤–ª—é—î UI:
      1) –°–ø—Ä–æ–±–∞ edit_text (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ message_id)
      2) –Ø–∫—â–æ –ø–∞–¥–∞—î ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è send_message
    –ó–∞–≤–∂–¥–∏ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î –∑–∞–ø–∞—Å–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —è–∫—â–æ —Ö—Ç–æ—Å—å ¬´–∑–∞–±—É–≤¬ª —ó—ó –¥–æ–¥–∞—Ç–∏.
    """
    if reply_markup is None:
        reply_markup = _fallback_kb()

    if message_id:
        try:
            return await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                parse_mode=parse_mode,
                reply_markup=reply_markup,
                disable_web_page_preview=disable_web_page_preview,
            )
        except Exception as e:
            # –ß–∞—Å—Ç–æ —Ä—É—à–∏—Ç—å—Å—è, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –∑ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∞–±–æ —Ç–µ–∫—Å—Ç –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è
            logger.debug("edit_message_text failed, falling back to send_message: %s", e)

    return await bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=parse_mode,
        reply_markup=reply_markup,
        disable_web_page_preview=disable_web_page_preview,
    )


# ------------------------------ Middleware-–∞—É–¥–∏—Ç ------------------------------

@dataclass
class _KbAuditConfig:
    enforce_fallback: bool = True  # —è–∫—â–æ True ‚Äî –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞–ø–∞—Å–Ω—É –∫–ª–∞–≤—É, —è–∫—â–æ –Ω–µ–º–∞


class KbAuditMiddleware(BaseMiddleware):
    """
    –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î –≤–∏—Ö—ñ–¥–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ (Message/CallbackQuery), —â–æ–±:
      - –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–∏ –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏;
      - –ø—Ä–∏ –±–∞–∂–∞–Ω–Ω—ñ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ fallback-–∫–ª–∞–≤—É.

    –ü—Ä–∏–º—ñ—Ç–∫–∞: —É aiogram 3.x middleware –ø—Ä–∞—Ü—é—é—Ç—å –¥–æ/–ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –∞–ø–¥–µ–π—Ç—É.
    –ú–∏ –æ—Ä—ñ—î–Ω—Ç—É—î–º–æ—Å—è –Ω–∞ —Ç–µ, —â–æ –±—ñ–ª—å—à—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –ø—Ä—è–º–æ –∑ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤.
    –¢—É—Ç –º–∏ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ CallbackQuery —ñ, —è–∫—â–æ —Ç—Ä–µ–±–∞, –¥–æ–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏.
    """
    def __init__(self, config: Optional[_KbAuditConfig] = None):
        super().__init__()
        self.config = config or _KbAuditConfig()

    async def __call__(self, handler, event, data):
        # –î–æ –æ–±—Ä–æ–±–∫–∏
        result = await handler(event, data)
        # –ü—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏: —è–∫—â–æ —Ü–µ CallbackQuery –±–µ–∑ –ø–æ–¥–∞–ª—å—à–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ‚Äî –Ω–∞–∫–∏–Ω–µ–º–æ fallback.
        try:
            if isinstance(event, CallbackQuery):
                msg: Optional[Message] = event.message
                if msg and (msg.reply_markup is None or not getattr(msg.reply_markup, "inline_keyboard", None)):
                    logger.warning("KbAudit: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ—Å–ª—è callback '%s'", event.data)
                    if self.config.enforce_fallback:
                        try:
                            await event.message.edit_reply_markup(reply_markup=_fallback_kb())
                        except Exception:
                            # —è–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –Ω–æ–≤–µ
                            try:
                                await event.message.answer("–û–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é:", reply_markup=_fallback_kb())
                            except Exception:
                                pass
        except Exception as e:
            logger.debug("KbAudit post-hook error: %s", e)
        return result


# ---------------------------- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä-—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å ---------------------------

def require_kb(fn):
    """
    –ó–∞–≥–ª—É—à–∫–∞-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –∫–æ–¥–æ–º –ø—ñ–¥ aiogram 2.x.
    –£ v3 –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç—å.
    """
    async def wrapper(*args, **kwargs):
        return await fn(*args, **kwargs)
    return wrapper


# ------------------------------ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ----------------------------------

def install_kb_audit(dp: Dispatcher, *, enforce_fallback: bool = True) -> None:
    """
    –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è middleware –¥–æ Dispatcher.
    """
    dp.update.middleware(KbAuditMiddleware(_KbAuditConfig(enforce_fallback=enforce_fallback)))
