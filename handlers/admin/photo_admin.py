# -*- coding: utf-8 -*-
"""
–ê–¥–º—ñ–Ω—Å—å–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—ñ–≤ (aiogram 3.x).

–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
- /photos_pending ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ —Ñ–æ—Ç–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º pending (–ø–∞—á–∫–∞–º–∏).
- –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ç–æ –∑ –¥—ñ—è–º–∏ (approve / reject / order / set_main).
- –ü—ñ—Å–ª—è approve/update –ø–æ—Ä—è–¥–∫—É/–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ ‚Äî —ñ–Ω–≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–µ—à –∫–∞—Ä—Ç–∫–∏.

–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:
    database.session.get_session
    database.orm.products.ProductPhoto
    utils.card_cache.update_file_id / invalidate
"""

from __future__ import annotations

from typing import Optional, List

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)

from database.session import get_session  # type: ignore
from database.orm.products import ProductPhoto  # type: ignore
from utils.card_cache import update_file_id, invalidate  # type: ignore

router = Router(name="photo_admin")

# --------------------------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ -----------------------------

def _kb_pending_item(photo_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ –í—ñ–¥–∫—Ä–∏—Ç–∏", callback_data=f"photo:open:{photo_id}")],
        ]
    )
    return kb


def _kb_photo_actions(dept_id: str, article: str, photo_id: int, current_order: int) -> InlineKeyboardMarkup:
    order_buttons = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=f"photo:order:{photo_id}:1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=f"photo:order:{photo_id}:2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=f"photo:order:{photo_id}:3"),
    ]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"photo:approve:{photo_id}"),
             InlineKeyboardButton(text="üóë –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"photo:reject:{photo_id}")],
            order_buttons,
            [InlineKeyboardButton(text="‚≠ê –ó—Ä–æ–±–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–º", callback_data=f"photo:set_main:{dept_id}:{article}:{photo_id}")],
        ]
    )
    return kb


# ------------------------------ –•–µ–ª–ø–µ—Ä–∏ –ë–î ------------------------------------

def _get_photo(photo_id: int) -> Optional[ProductPhoto]:
    with get_session() as s:
        return s.query(ProductPhoto).filter(ProductPhoto.id == int(photo_id)).one_or_none()


def _list_pending(limit: int = 20) -> List[ProductPhoto]:
    with get_session() as s:
        q = s.query(ProductPhoto).filter(ProductPhoto.status == "pending").order_by(ProductPhoto.id.desc())
        return q.limit(limit).all()  # type: ignore


def _set_status(photo_id: int, status: str) -> Optional[ProductPhoto]:
    with get_session() as s:
        row = s.query(ProductPhoto).filter(ProductPhoto.id == int(photo_id)).one_or_none()
        if not row:
            return None
        row.status = status
        s.commit()
        return row


def _set_order(photo_id: int, order_no: int) -> Optional[ProductPhoto]:
    order_no = max(1, min(3, int(order_no)))
    with get_session() as s:
        row = s.query(ProductPhoto).filter(ProductPhoto.id == int(photo_id)).one_or_none()
        if not row:
            return None
        row.order_no = order_no
        s.commit()
        return row


# ------------------------------ –ö–æ–º–∞–Ω–¥–∏/—Ö–µ–Ω–¥–ª–µ—Ä–∏ ------------------------------

@router.message(Command("photos_pending"))
async def photos_pending(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ N —Ñ–æ—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó (pending).
    """
    rows = _list_pending(limit=30)
    if not rows:
        await message.answer("–ù–µ–º–∞—î —Ñ–æ—Ç–æ —É —Å—Ç–∞—Ç—É—Å—ñ pending.")
        return

    for r in rows:
        caption = f"ID: {r.id}\n–í—ñ–¥–¥—ñ–ª: {r.dept_id}\n–ê—Ä—Ç–∏–∫—É–ª: {r.article}\n–°—Ç–∞—Ç—É—Å: {r.status}\n–ü–æ—Ä—è–¥–æ–∫: {r.order_no}"
        if r.file_id:
            await message.answer_photo(
                photo=r.file_id,
                caption=caption,
                reply_markup=_kb_pending_item(r.id),
            )
        else:
            await message.answer(
                text=caption,
                reply_markup=_kb_pending_item(r.id),
            )


@router.callback_query(F.data.startswith("photo:open:"))
async def cb_open_photo(cb: CallbackQuery):
    """
    –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.
    """
    try:
        _, _, id_str = cb.data.split(":", 2)
        pid = int(id_str)
    except Exception:
        await cb.answer("–ü–æ–º–∏–ª–∫–æ–≤–∏–π ID", show_alert=True)
        return

    r = _get_photo(pid)
    if not r:
        await cb.answer("–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    caption = f"ID: {r.id}\n–í—ñ–¥–¥—ñ–ª: {r.dept_id}\n–ê—Ä—Ç–∏–∫—É–ª: {r.article}\n–°—Ç–∞—Ç—É—Å: {r.status}\n–ü–æ—Ä—è–¥–æ–∫: {r.order_no}"
    kb = _kb_photo_actions(str(r.dept_id), str(r.article), r.id, r.order_no)

    # –Ø–∫—â–æ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤–∂–µ –±—É–ª–æ —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–≥—É—î–º–æ, —ñ–Ω–∞–∫—à–µ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –∑ —Ñ–æ—Ç–æ
    try:
        if cb.message.photo:
            await cb.message.edit_media(
                media=InputMediaPhoto(media=r.file_id, caption=caption),
                reply_markup=kb
            )
        else:
            await cb.message.answer_photo(photo=r.file_id, caption=caption, reply_markup=kb)
    except Exception:
        # –Ø–∫—â–æ file_id –∑–∞—Å—Ç–∞—Ä—ñ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç
        await cb.message.edit_text(text=caption, reply_markup=kb)

    await cb.answer()


@router.callback_query(F.data.startswith("photo:approve:"))
async def cb_approve_photo(cb: CallbackQuery):
    """
    –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ñ–æ—Ç–æ: status -> approved, —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–µ—à—É –∫–∞—Ä—Ç–∫–∏.
    """
    try:
        _, _, id_str = cb.data.split(":", 2)
        pid = int(id_str)
    except Exception:
        await cb.answer("–ü–æ–º–∏–ª–∫–æ–≤–∏–π ID", show_alert=True)
        return

    row = _set_status(pid, "approved")
    if not row:
        await cb.answer("–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–∞—Ä—Ç–∫—É ‚Äî —â–æ–± –ø—ñ–¥—Ö–æ–ø–∏–ª–∞ —Å—Ö–≤–∞–ª–µ–Ω–µ —Ñ–æ—Ç–æ
    with get_session() as s:
        invalidate(s, str(row.dept_id), str(row.article))
        s.commit()

    await cb.answer("–°—Ö–≤–∞–ª–µ–Ω–æ ‚úÖ", show_alert=False)
    await cb.message.edit_reply_markup(reply_markup=_kb_photo_actions(str(row.dept_id), str(row.article), row.id, row.order_no))


@router.callback_query(F.data.startswith("photo:reject:"))
async def cb_reject_photo(cb: CallbackQuery):
    """
    –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ —Ñ–æ—Ç–æ: status -> rejected.
    """
    try:
        _, _, id_str = cb.data.split(":", 2)
        pid = int(id_str)
    except Exception:
        await cb.answer("–ü–æ–º–∏–ª–∫–æ–≤–∏–π ID", show_alert=True)
        return

    row = _set_status(pid, "rejected")
    if not row:
        await cb.answer("–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    await cb.answer("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ üóë", show_alert=False)
    await cb.message.edit_reply_markup(reply_markup=_kb_photo_actions(str(row.dept_id), str(row.article), row.id, row.order_no))


@router.callback_query(F.data.startswith("photo:order:"))
async def cb_set_order(cb: CallbackQuery):
    """
    –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∫–∞–∑—É (1..3). –ù–µ –∑–º—ñ–Ω—é—î —Å—Ç–∞—Ç—É—Å.
    """
    try:
        _, _, id_str, order_str = cb.data.split(":", 3)
        pid = int(id_str)
        order_no = int(order_str)
    except Exception:
        await cb.answer("–§–æ—Ä–º–∞—Ç: order 1..3", show_alert=True)
        return

    row = _set_order(pid, order_no)
    if not row:
        await cb.answer("–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    await cb.answer(f"–ü–æ—Ä—è–¥–æ–∫ ‚Üí {order_no}", show_alert=False)
    await cb.message.edit_reply_markup(reply_markup=_kb_photo_actions(str(row.dept_id), str(row.article), row.id, row.order_no))


@router.callback_query(F.data.startswith("photo:set_main:"))
async def cb_set_main(cb: CallbackQuery):
    """
    –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —Ñ–æ—Ç–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –¥–ª—è –∫–∞—Ä—Ç–∫–∏:
    - –æ–Ω–æ–≤–ª—é—î–º–æ file_id —É L2-–∫–µ—à—ñ –∫–∞—Ä—Ç–∫–∏ (—Ç–∞ L1 –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ card_cache)
    - —ñ–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–∞—Ä—Ç–∫—É, —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥—Ç—è–≥–Ω—É–ª–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π file_id
    """
    try:
        _, _, dept_id, article, id_str = cb.data.split(":", 4)
        pid = int(id_str)
    except Exception:
        await cb.answer("–ü–æ–º–∏–ª–∫–æ–≤—ñ –¥–∞–Ω—ñ", show_alert=True)
        return

    row = _get_photo(pid)
    if not row or str(row.dept_id) != str(dept_id) or str(row.article) != str(article):
        await cb.answer("–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # –û–Ω–æ–≤–∏—Ç–∏ file_id —É –∫–µ—à—ñ —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π
    with get_session() as s:
        update_file_id(s, str(dept_id), str(article), row.file_id)
        # –û–¥—Ä–∞–∑—É —ñ–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–∞—Ä—Ç–∫—É, —â–æ–± payload –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º file_id
        invalidate(s, str(dept_id), str(article))
        s.commit()

    await cb.answer("–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–º ‚≠ê", show_alert=False)
