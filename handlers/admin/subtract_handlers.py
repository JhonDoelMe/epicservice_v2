# -*- coding: utf-8 -*-
"""
–•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó ¬´üìâ –í—ñ–¥–Ω—è—Ç–∏ –∑—ñ–±—Ä–∞–Ω–µ¬ª (–∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø—ñ–¥ aiogram 3.x).

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
 - –ü—Ä–∏–π–º–∞—î –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞ –∞–±–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–µ–∫—Å—Ç –∑—ñ —Å–ø–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è.
 - –§–æ—Ä–º–∞—Ç–∏ —Ä—è–¥–∫—ñ–≤:
     1) "–∞—Ä—Ç–∏–∫—É–ª, –∫—ñ–ª—å–∫—ñ—Å—Ç—å"               ‚Üí –Ω–∞–ø—Ä. "12345678, 3"
     2) "–Ω–∞–∑–≤–∞..." –¥–µ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —î 8 —Ü–∏—Ñ—Ä  ‚Üí –Ω–∞–ø—Ä. "12345678 –ù–æ—Å–∫–∏ —á–æ—Ä–Ω—ñ L, 2"
 - –ö–æ–∂–µ–Ω —Ä—è–¥–æ–∫ –æ–∫—Ä–µ–º–æ, –ø–æ—Ä–æ–∂–Ω—ñ —ñ –∫–æ–º–µ–Ω—Ç–∞—Ä–Ω—ñ (# ...) —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è.
 - –î–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó:
     - –ë–ª–æ–∫—É—î —Ç–æ–≤–∞—Ä —É –ë–î (SELECT ... FOR UPDATE SKIP LOCKED)
     - –ó–º–µ–Ω—à—É—î qty –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å, –∞–ª–µ –Ω–µ –Ω–∏–∂—á–µ 0
     - –ü–∏—à–µ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç (—Å–∫—ñ–ª—å–∫–∏ –±—É–ª–æ, —Å–∫—ñ–ª—å–∫–∏ –∑–Ω—è—Ç–æ, —Å–∫—ñ–ª—å–∫–∏ —Å—Ç–∞–ª–æ)
 - –Ü–Ω–≤–∞–ª—ñ–¥—É—î –∫–µ—à –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –∑–∞—á–µ–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (ProductCardCache).
 - –í –∫—ñ–Ω—Ü—ñ –Ω–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –ø–æ —É—Å–ø—ñ—à–Ω–∏—Ö —ñ –ø–æ–º–∏–ª–∫–∞—Ö.

–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ .env:
 - SUBTRACT_ALLOWED_ROLES: "admin,manager" (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º) ‚Äî —Ö—Ç–æ –º–∞—î –ø—Ä–∞–≤–æ.
 - DEPT_DEFAULT: –≤—ñ–¥–¥—ñ–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –π–æ–≥–æ –Ω–µ –≤–∫–∞–∑—É—î —è–≤–Ω–æ (–æ–ø—Ü—ñ–π–Ω–æ).

–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:
 - aiogram 3.x (Dispatcher —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –∑ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è `aiogram`)
 - SQLAlchemy ORM –º–æ–¥–µ–ª—ñ: Product, ProductCardCache
 - —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—ñ–π get_session()
"""

from __future__ import annotations

import os
import re
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple

from aiogram import types, Dispatcher, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
from sqlalchemy import and_, text

# ORM —Ç–∞ —Å–µ—Å—ñ—ó
from database.orm.products import Product, ProductCardCache  # type: ignore
from database.session import get_session  # type: ignore

# –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–∞—à guard, –∞–ª–µ —Ñ–∞–π–ª –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –Ω—å–æ–≥–æ –∂–æ—Ä—Å—Ç–∫–æ
try:
    from utils.kb_guard import safe_edit_or_send, require_kb  # type: ignore
except Exception:  # pragma: no cover
    async def safe_edit_or_send(bot, chat_id, text, *, message_id=None, parse_mode=None, reply_markup=None, disable_web_page_preview=None):
        return await bot.send_message(
            chat_id,
            text,
            parse_mode=parse_mode,
            reply_markup=reply_markup,
            disable_web_page_preview=disable_web_page_preview,
        )

    def require_kb(fn):  # noqa
        return fn

load_dotenv(override=True)

SUBTRACT_ALLOWED_ROLES = os.getenv("SUBTRACT_ALLOWED_ROLES", "admin,manager")
DEPT_DEFAULT = os.getenv("DEPT_DEFAULT", "").strip() or None

# –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤. –£ —Ç–µ–±–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∞ —Ä–æ–ª—å–æ–≤–∞ –º–æ–¥–µ–ª—å.
ADMIN_IDS = set(int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x.strip().isdigit())
MANAGER_IDS = set(int(x) for x in os.getenv("MANAGER_IDS", "").replace(" ", "").split(",") if x.strip().isdigit())


# ------------------------------ –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥—É --------------------------------

ARTICLE_RE = re.compile(r"^\s*(\d{8})\b")  # 8 —Ü–∏—Ñ—Ä –Ω–∞ –ø–æ—á–∞—Ç–∫—É
LINE_SPLIT_RE = re.compile(r"[\r\n]+")


@dataclass
class SubtractItem:
    article: str
    qty: float
    dept_id: Optional[str] = None


def _extract_article(text: str) -> Optional[str]:
    """–í–∏—Ç—è–≥—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª –∑ –ø–æ—á–∞—Ç–∫—É —Ä—è–¥–∫–∞."""
    if not isinstance(text, str):
        return None
    m = ARTICLE_RE.match(text)
    if not m:
        return None
    return m.group(1)


def _parse_line(line: str, default_dept: Optional[str]) -> Optional[SubtractItem]:
    """
    –ü–∞—Ä—Å–∏—Ç–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫.
    –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:
        "12345678, 3"
        "12345678 –Ω–∞–∑–≤–∞, 2"
        "100:12345678, 5"   (—è–∫—â–æ —Ö–æ—á–µ—à —è–≤–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–¥—ñ–ª —É —Ä—è–¥–∫—É: dept:article, qty)
    """
    s = line.strip()
    if not s or s.startswith("#"):
        return None

    # –í–∞—Ä—ñ–∞–Ω—Ç –∑ —è–≤–Ω–∏–º –≤—ñ–¥–¥—ñ–ª–æ–º: 100:12345678, 5
    if ":" in s.split(",")[0]:
        head, *rest = s.split(",", 1)
        qty_str = rest[0] if rest else ""
        try:
            dept_part, art_part = head.split(":", 1)
            dept = dept_part.strip()
            art = _extract_article(art_part.strip())
            qty = float(qty_str.strip().replace(",", "."))
            if not art or qty <= 0:
                return None
            return SubtractItem(article=art, qty=qty, dept_id=dept)
        except Exception:
            return None

    # –ó–≤–∏—á–∞–π–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: "–∞—Ä—Ç–∏–∫—É–ª, qty" –∞–±–æ "–∞—Ä—Ç–∏–∫—É–ª –Ω–∞–∑–≤–∞, qty"
    if "," in s:
        left, qty_str = s.split(",", 1)
        art = _extract_article(left)
        try:
            qty = float(qty_str.strip().replace(",", "."))
        except Exception:
            return None
        if not art or qty <= 0:
            return None
        return SubtractItem(article=art, qty=qty, dept_id=default_dept)

    # –ë–µ–∑ –∫–æ–º–∏ –Ω–µ –ø—Ä–∏–π–º–∞—î–º–æ (—â–æ–± —É–Ω–∏–∫–∞—Ç–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–µ–π)
    return None


def parse_subtract_payload(text: str, default_dept: Optional[str]) -> List[SubtractItem]:
    """–†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó —Å–ø–∏—Å–∞–Ω–Ω—è."""
    items: List[SubtractItem] = []
    for line in LINE_SPLIT_RE.split(text or ""):
        it = _parse_line(line, default_dept)
        if it:
            items.append(it)
    return items


# ------------------------------ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ --------------------------------

def _is_allowed(user: types.User) -> bool:
    """–ì—Ä—É–±–æ: –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞–º —ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º."""
    if user.id in ADMIN_IDS:
        return True
    if user.id in MANAGER_IDS and "manager" in SUBTRACT_ALLOWED_ROLES.lower():
        return True
    return False


# ------------------------------ –ë–∞–∑–∞/—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó -------------------------------

def _invalidate_card_cache(session, dept_id: str, article: str) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ –∫–µ—à –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É (L2)."""
    session.query(ProductCardCache).filter(
        ProductCardCache.dept_id == str(dept_id),
        ProductCardCache.article == str(article),
    ).delete(synchronize_session=False)


def _subtract_one(session, dept_id: str, article: str, qty: float) -> Tuple[float, float]:
    """
    –°–ø–∏—Å–∞—Ç–∏ qty –∑ –ø—Ä–æ–¥—É–∫—Ç—É (–∞–ª–µ –Ω–µ –Ω–∏–∂—á–µ 0).
    –ü–æ–≤–µ—Ä—Ç–∞—î (–±—É–ª–æ, —Å—Ç–∞–ª–æ).
    –ë–ª–æ–∫—É—î —Ä—è–¥–æ–∫ –Ω–∞ —á–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.
    """
    # –Ø–≤–Ω–∏–π –±–ª–æ–∫ —Ä—è–¥–∫–∞. SQLAlchemy Core —Ç–µ–∫—Å—Ç–æ–º, —â–æ–± –Ω–µ –∑–∞–ª–µ–∂–∞—Ç–∏ –≤—ñ–¥ –¥—ñ–∞–ª–µ–∫—Ç—É.
    lock_sql = text(
        """
        SELECT id FROM products
        WHERE dept_id = :dept_id AND article = :article
        FOR UPDATE SKIP LOCKED
    """
    )
    session.execute(lock_sql, {"dept_id": str(dept_id), "article": str(article)})

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç
    prod = (
        session.query(Product)
        .filter(and_(Product.dept_id == str(dept_id), Product.article == str(article)))
        .one_or_none()
    )

    if not prod:
        raise ValueError("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    before = float(prod.qty or 0.0)
    new_qty = before - float(qty)
    if new_qty < 0:
        new_qty = 0.0

    prod.qty = new_qty
    # –Ü–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–µ—à—É –∫–∞—Ä—Ç–∫–∏
    _invalidate_card_cache(session, dept_id, article)

    return before, new_qty


# ------------------------------ –•–µ–Ω–¥–ª–µ—Ä–∏ TG -----------------------------------

def _kb_done() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="go_home"))
    return kb


@require_kb
async def cmd_subtract_start(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç –¥—ñ–∞–ª–æ–≥—É —Å–ø–∏—Å–∞–Ω–Ω—è. –ü–æ—è—Å–Ω—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç, –±–µ—Ä–µ–º–æ –≤—ñ–¥–¥—ñ–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
    """
    if not _is_allowed(message.from_user):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è.")
        return

    dept_hint = (
        f"–í—ñ–¥–¥—ñ–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: <b>{DEPT_DEFAULT}</b>"
        if DEPT_DEFAULT
        else "–í—ñ–¥–¥—ñ–ª –Ω–µ –∑–∞–¥–∞–Ω–æ (–±—É–¥–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —É —Ä—è–¥–∫–∞—Ö)."
    )
    text_msg = (
        "üìâ <b>–í—ñ–¥–Ω—è—Ç–∏ –∑—ñ–±—Ä–∞–Ω–µ</b>\n"
        f"{dept_hint}\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–∑–∏—Ü—ñ—è–º–∏, –∫–æ–∂–Ω–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞. –ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "<code>12345678, 3\n"
        "12345678 –®–∫–∞—Ä–ø–µ—Ç–∫–∏ —á–æ—Ä–Ω—ñ L, 2\n"
        "100:12345678, 5</code>\n\n"
        "–î–µ 100 ‚Äî –∫–æ–¥ –≤—ñ–¥–¥—ñ–ª—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —è–≤–Ω–æ)."
    )
    await message.answer(text_msg, parse_mode="HTML", reply_markup=_kb_done())


@require_kb
async def handle_subtract_payload(message: types.Message):
    """
    –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫: –ø—Ä–∏–π–º–∞—î —Ç–µ–∫—Å—Ç, —Å–ø–∏—Å—É—î –ø–æ–∑–∏—Ü—ñ—ó, –ø–æ–∫–∞–∑—É—î –∑–≤—ñ—Ç.
    """
    if not _is_allowed(message.from_user):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è.")
        return

    items = parse_subtract_payload(message.text or "", DEPT_DEFAULT)
    if not items:
        await message.reply(
            "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π—à–æ–≤ –∂–æ–¥–Ω–æ—ó –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó. –§–æ—Ä–º–∞—Ç: <code>–∞—Ä—Ç–∏–∫—É–ª, –∫—ñ–ª—å–∫—ñ—Å—Ç—å</code> –∞–±–æ <code>dept:–∞—Ä—Ç–∏–∫—É–ª, –∫—ñ–ª—å–∫—ñ—Å—Ç—å</code>.",
            parse_mode="HTML",
        )
        return

    # –ê–≥—Ä–µ–≥—É—î–º–æ –æ–¥–Ω–∞–∫–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –º–µ–Ω—à–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞–ø–¥–µ–π—Ç—ñ–≤
    agg: Dict[Tuple[str, str], float] = {}
    for it in items:
        dept = str(it.dept_id or "").strip()
        if not dept:
            await message.reply(
                "‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–æ –≤—ñ–¥–¥—ñ–ª —ñ –Ω–µ–º–∞—î DEPT_DEFAULT. –î–æ–¥–∞–π—Ç–µ —É —Ä—è–¥–∫—É —Ñ–æ—Ä–º–∞—Ç <code>dept:–∞—Ä—Ç–∏–∫—É–ª, –∫—ñ–ª—å–∫—ñ—Å—Ç—å</code> –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ DEPT_DEFAULT.",
                parse_mode="HTML",
            )
            return
        key = (dept, it.article)
        agg[key] = agg.get(key, 0.0) + float(it.qty)

    results: List[str] = []
    errors: List[str] = []

    from aiogram.utils.markdown import escape_md  # –¥–ª—è –±–µ–∑–ø–µ—á–Ω–∏—Ö –≤—Å—Ç–∞–≤–æ–∫, —è–∫—â–æ —Ç—Ä–µ–±–∞

    # –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π–Ω–æ —Å–ø–∏—Å—É—î–º–æ
    try:
        with get_session() as s:
            for (dept, art), qty in agg.items():
                try:
                    before, after = _subtract_one(s, dept, art, qty)
                    results.append(f"‚Ä¢ {dept}:{art}: {before:.2f} ‚àí {qty:.2f} ‚Üí <b>{after:.2f}</b>")
                except ValueError:
                    errors.append(f"‚Ä¢ {dept}:{art}: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                except Exception:
                    errors.append(f"‚Ä¢ {dept}:{art}: –ø–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∞–Ω–Ω—è")
            s.commit()
    except Exception:
        # —è–∫—â–æ —â–æ—Å—å –∫—Ä–∏—Ç–∏—á–Ω–µ –ø–æ–∑–∞ —Ü–∏–∫–ª–æ–º
        errors.append(
            "–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –ß–∞—Å—Ç–∏–Ω–∞ –ø–æ–∑–∏—Ü—ñ–π –º–æ–≥–ª–∞ –Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏—Å—å."
        )

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    lines: List[str] = []
    lines.append("üìâ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏—Å–∞–Ω–Ω—è</b>")
    if results:
        lines.append("\n".join(results))
    if errors:
        lines.append("")
        lines.append("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∏:")
        lines.append("\n".join(errors))

    # –Ø–∫—â–æ –Ω–µ –±—É–ª–æ –∂–æ–¥–Ω–æ–≥–æ —É—Å–ø—ñ—Ö—É
    if not results and errors:
        await message.answer(
            "\n".join(lines), parse_mode="HTML", reply_markup=_kb_done()
        )
        return

    # –ü—ñ–¥—Å—É–º–æ–∫
    ok_cnt = len(results)
    err_cnt = len(errors)
    lines.append("")
    lines.append(f"–ü—ñ–¥—Å—É–º–æ–∫: —É—Å–ø—ñ—à–Ω–æ ‚Äî <b>{ok_cnt}</b>, –ø–æ–º–∏–ª–æ–∫ ‚Äî <b>{err_cnt}</b>.")

    await message.answer(
        "\n".join(lines), parse_mode="HTML", reply_markup=_kb_done()
    )


# ------------------------------ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ------------------------------------

def register(dp: Dispatcher) -> None:
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ —Å–ø–∏—Å–∞–Ω–Ω—è.
    –ü—Ä–æ–ø–æ–Ω—É—î—Ç—å—Å—è –º–∞—Ç–∏ –æ–∫—Ä–µ–º—É –∫–æ–º–∞–Ω–¥—É/–∫–Ω–æ–ø–∫—É –≤ –∞–¥–º—ñ–Ω—Ü—ñ, —è–∫–∞ –≤–µ–¥–µ —Å—é–¥–∏.
    """
    # –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
    dp.message.register(cmd_subtract_start, Command("subtract", "minus"))
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ç–µ–∫—Å—Ç—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º regexp —á–µ—Ä–µ–∑ magic-filter
    dp.message.register(
        handle_subtract_payload,
        F.text.regexp(r"^\s*(\d{8}|(\d{1,4}:\d{8}))\b.*?,\s*[-+]?\d+([.,]\d+)?\s*$"),
    )
