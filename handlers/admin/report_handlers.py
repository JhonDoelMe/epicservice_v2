# -*- coding: utf-8 -*-
"""
–ê–¥–º—ñ–Ω—Å—å–∫—ñ –∑–≤—ñ—Ç–∏ —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—å.

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
- –ó–≤—ñ—Ç–∏ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö:
    ‚Ä¢ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –£–ù–Ü–ö–ê–õ–¨–ù–ò–• –∞—Ä—Ç–∏–∫—É–ª—ñ–≤
    ‚Ä¢ —Å—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç) —Ç–∞ –æ—Ü—ñ–Ω–æ—á–Ω–∞ —Å—É–º–∞ (qty * price), –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º
    ‚Ä¢ —Å–µ—Ä–µ–¥–Ω—è/–º–µ–¥—ñ–∞–Ω–Ω–∞ —Ü—ñ–Ω–∞ (–æ–ø—Ü—ñ–π–Ω–æ)
- –ï–∫—Å–ø–æ—Ä—Ç —É .xlsx/.ods/.csv –∑ —î–¥–∏–Ω–∏–º API.
- –Ü–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:
    report_<—Ç–∏–ø>_<dept|all>_<–î–î.–ú–ú.–†–†–†–†_–ì–ì.–ú–ú>.<ext>
- –†–µ—Ç–µ–Ω—à–Ω: –ø—ñ–¥—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ –∫–∞—Ç–∞–ª–æ–≥—É exports/.
- –ï–∫—Å–ø–æ—Ä—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ —ñ ¬´–Ω–∞–¥–ª–∏—à–∫—ñ–≤¬ª –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —ñ–Ω—à–∏–π –º–æ–¥—É–ª—å,
  –∞–ª–µ —Ç—É—Ç –∑–∞–ª–∏—à–µ–Ω–æ —Ö–µ–ª–ø–µ—Ä –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è.

–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:
- aiogram 2.x (–¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤)
- pandas
- SQLAlchemy ORM: Product
- utils.io_spreadsheet: write_table
- python-dotenv
"""

from __future__ import annotations

import os
import time
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Iterable, List, Optional, Tuple

import pandas as pd
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from sqlalchemy import and_

from database.orm.products import Product  # type: ignore
from database.session import get_session  # type: ignore

from utils.io_spreadsheet import write_table

load_dotenv(override=True)

# ------------------------------ –ö–æ–Ω—Ñ—ñ–≥ ---------------------------------------

EXPORTS_DIR = Path(os.getenv("EXPORTS_DIR", "exports")).resolve()
EXPORTS_DIR.mkdir(parents=True, exist_ok=True)

# –†–µ—Ç–µ–Ω—à–Ω —É –¥–Ω—è—Ö (0 –∞–±–æ –≤—ñ–¥‚Äô—î–º–Ω–µ ‚Äî –Ω–µ —á–∏—Å—Ç–∏—Ç–∏)
EXPORTS_RETENTION_DAYS = int(os.getenv("EXPORTS_RETENTION_DAYS", "30") or 0)

# –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –µ–∫—Å–ø–æ—Ä—Ç—É
ALLOWED_EXPORT_EXT = ("xlsx", "ods", "csv")

# –•—Ç–æ –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑–≤—ñ—Ç–∏ (—è–∫—â–æ –ª–æ–≥—ñ–∫–∞ –ø—Ä–∞–≤ —Å–ø—Ä–æ—â–µ–Ω–∞)
ADMIN_IDS = set(int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x.strip().isdigit())


# ------------------------------ –•–µ–ª–ø–µ—Ä–∏ --------------------------------------

def _ts_str() -> str:
    return time.strftime("%d.%m.%Y_%H.%M")


def _ensure_ext(ext: str) -> str:
    e = ext.lower().lstrip(".")
    if e not in ALLOWED_EXPORT_EXT:
        return "xlsx"
    return e


def _report_filename(kind: str, dept: Optional[str], ext: str) -> Path:
    """
    report_<—Ç–∏–ø>_<dept|all>_<–î–î.–ú–ú.–†–†–†–†_–ì–ì.–ú–ú>.<ext>
    kind: "unique", "stock", "inactive", "all_departments" —ñ —Ç.–ø.
    """
    tag = str(dept) if dept else "all"
    name = f"report_{kind}_{tag}_{_ts_str()}.{_ensure_ext(ext)}"
    return EXPORTS_DIR / name


def _cleanup_old_exports(retention_days: int = EXPORTS_RETENTION_DAYS) -> int:
    """
    –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à–µ retention_days –∑ –∫–∞—Ç–∞–ª–æ–≥—É exports/.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.
    """
    if retention_days <= 0:
        return 0
    import datetime as dt
    now = dt.datetime.now()
    removed = 0
    for p in EXPORTS_DIR.glob("*.*"):
        try:
            mtime = dt.datetime.fromtimestamp(p.stat().st_mtime)
            if (now - mtime).days > retention_days:
                p.unlink(missing_ok=True)
                removed += 1
        except Exception:
            # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
    return removed


def _df_unique_articles(products: Iterable[Product]) -> pd.DataFrame:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î DataFrame –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ (dept_id, article, name, qty, price, sum).
    –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞—Ä—Ç–∏–∫—É–ª—ñ–≤ —Ä–∞—Ö—É—î—Ç—å—Å—è –ø–æ (dept_id, article).
    """
    rows: List[Dict[str, object]] = []
    for p in products:
        qty = float(getattr(p, "qty", 0.0) or 0.0)
        price = float(getattr(p, "price", 0.0) or 0.0)
        rows.append({
            "–≤—ñ–¥–¥—ñ–ª": str(getattr(p, "dept_id")),
            "–∞—Ä—Ç–∏–∫—É–ª": str(getattr(p, "article")),
            "–Ω–∞–∑–≤–∞": str(getattr(p, "name") or ""),
            "–∫—ñ–ª—å–∫—ñ—Å—Ç—å": qty,
            "—Ü—ñ–Ω–∞": price,
            "—Å—É–º–∞": qty * price,
            "–∞–∫—Ç–∏–≤–Ω–∏–π": bool(getattr(p, "active", True)),
            "–º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑ —Ä—É—Ö—É": float(getattr(p, "months_no_move", 0.0) or 0.0),
        })
    df = pd.DataFrame(rows)
    if df.empty:
        return pd.DataFrame(columns=["–≤—ñ–¥–¥—ñ–ª", "–∞—Ä—Ç–∏–∫—É–ª", "–Ω–∞–∑–≤–∞", "–∫—ñ–ª—å–∫—ñ—Å—Ç—å", "—Ü—ñ–Ω–∞", "—Å—É–º–∞", "–∞–∫—Ç–∏–≤–Ω–∏–π", "–º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑ —Ä—É—Ö—É"])
    return df


def _per_dept_summary(df: pd.DataFrame) -> pd.DataFrame:
    """
    –ó–≤–µ–¥–µ–Ω–Ω—è –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö:
      ‚Ä¢ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞—Ä—Ç–∏–∫—É–ª—ñ–≤
      ‚Ä¢ –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç)
      ‚Ä¢ –∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞
      ‚Ä¢ —Å–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ (–∑–≤–∞–∂–µ–Ω–∞ –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)
    """
    if df.empty:
        return pd.DataFrame(columns=["–≤—ñ–¥–¥—ñ–ª", "—É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞—Ä—Ç–∏–∫—É–ª—ñ–≤", "—à—Ç (‚àë)", "—Å—É–º–∞ (‚àë)", "—Å–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞"])
    grp = df.groupby("–≤—ñ–¥–¥—ñ–ª", dropna=False)

    def _weighted_avg_price(g: pd.DataFrame) -> float:
        qty = g.get("–∫—ñ–ª—å–∫—ñ—Å—Ç—å")
        price = g.get("—Ü—ñ–Ω–∞")
        if qty is None or price is None or qty.fillna(0).sum() == 0:
            return float(price.fillna(0).mean()) if price is not None else 0.0
        return float((price.fillna(0) * qty.fillna(0)).sum() / qty.fillna(0).sum())

    res = pd.DataFrame({
        "—É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞—Ä—Ç–∏–∫—É–ª—ñ–≤": grp["–∞—Ä—Ç–∏–∫—É–ª"].nunique(),
        "—à—Ç (‚àë)": grp["–∫—ñ–ª—å–∫—ñ—Å—Ç—å"].sum(min_count=1),
        "—Å—É–º–∞ (‚àë)": grp["—Å—É–º–∞"].sum(min_count=1)
    }).reset_index()

    # –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –æ–∫—Ä–µ–º–æ
    avg_rows = []
    for dept, g in grp:
        avg_rows.append({"–≤—ñ–¥–¥—ñ–ª": dept, "—Å–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞": _weighted_avg_price(g)})
    avg_df = pd.DataFrame(avg_rows)

    out = pd.merge(res, avg_df, on="–≤—ñ–¥–¥—ñ–ª", how="left")
    # –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    for c in ["—à—Ç (‚àë)", "—Å—É–º–∞ (‚àë)", "—Å–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞"]:
        if c in out.columns:
            out[c] = out[c].fillna(0.0).astype(float)
    return out.sort_values(by="–≤—ñ–¥–¥—ñ–ª")


# ------------------------------ –û—Å–Ω–æ–≤–Ω—ñ API ----------------------------------

@dataclass
class ReportOptions:
    """–û–ø—Ü—ñ—ó –∑–≤—ñ—Ç—ñ–≤."""
    dept_id: Optional[str] = None       # —è–∫—â–æ None ‚Äî –≤—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏
    include_inactive: bool = False      # –≤–∫–ª—é—á–∞—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
    fmt: str = "xlsx"                   # "xlsx" | "ods" | "csv"
    kind: str = "unique"                # —Ç–∏–ø –∑–≤—ñ—Ç—É –¥–ª—è —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
    sheet_name: str = "–ó–≤—ñ—Ç"            # —ñ–º'—è –∞—Ä–∫—É—à–∞ –¥–ª—è Excel/ODS


def build_products_df(opts: ReportOptions) -> pd.DataFrame:
    """
    –í–∏—Ç—è–≥—Ç–∏ –¥–∞–Ω—ñ –∑ –ë–î –ø—ñ–¥ –∑–≤—ñ—Ç.
    """
    with get_session() as s:
        q = s.query(Product)
        if opts.dept_id:
            q = q.filter(Product.dept_id == str(opts.dept_id))
        if not opts.include_inactive:
            q = q.filter(Product.active == True)  # noqa: E712
        products = q.all()  # type: ignore
    return _df_unique_articles(products)


def build_summary_df(df: pd.DataFrame) -> pd.DataFrame:
    """
    –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω–Ω—è –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–µ—Ä–µ–ª—ñ–∫—É —Ç–æ–≤–∞—Ä—ñ–≤.
    """
    return _per_dept_summary(df)


def export_report(opts: ReportOptions) -> Path:
    """
    –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç —ñ –∑–∞–ø–∏—Å–∞—Ç–∏ –π–æ–≥–æ —É —Ñ–∞–π–ª —É –∫–∞—Ç–∞–ª–æ–∑—ñ exports/.
    –ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    df = build_products_df(opts)
    summary = build_summary_df(df)

    # –Ø–∫—â–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –≤—ñ–¥–¥—ñ–ª ‚Äî —Ä–æ–±–∏–º–æ –æ–¥–∏–Ω –∞—Ä–∫—É—à
    # –Ø–∫—â–æ –≤—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏ ‚Äî –º–æ–∂–µ–º–æ –∑–∞–ø–∏—Å–∞—Ç–∏ –¥–≤–∞ –∞—Ä–∫—É—à—ñ: "–ü–µ—Ä–µ–ª—ñ–∫", "–ó–≤–µ–¥–µ–Ω–Ω—è"
    path = _report_filename(opts.kind, opts.dept_id or None, opts.fmt)

    if opts.fmt.lower() in ("xlsx", "ods"):
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–º–æ –ª–∏—à–µ –æ–¥–∏–Ω –∞—Ä–∫—É—à. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –º—É–ª—å—Ç–∏-–∞—Ä–∫—É—à—ñ.
        # –¢–µ–ø–µ—Ä: —è–∫—â–æ summary –Ω–µ –ø—É—Å—Ç–µ, –ø–∏—à–µ–º–æ —Å–∞–º–µ summary. –Ü–Ω–∞–∫—à–µ ‚Äî –ø–æ–≤–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫.
        df_to_write = summary if not summary.empty else df
        write_table(df_to_write, path, fmt=opts.fmt, sheet_name=opts.sheet_name, index=False)
    else:
        # CSV ‚Äî —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –Ω–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö
        df_to_write = summary if not summary.empty else df
        write_table(df_to_write, path, fmt="csv", index=False)

    # –†–µ—Ç–µ–Ω—à–Ω
    _cleanup_old_exports()
    return path


# ------------------------------ –•–µ–Ω–¥–ª–µ—Ä–∏ TG ----------------------------------

def _kb_reports_main(dept: Optional[str]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    tag = dept or "all"
    kb.add(
        InlineKeyboardButton("üî¢ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∞—Ä—Ç–∏–∫—É–ª–∏", callback_data=f"rep:unique:{tag}"),
        InlineKeyboardButton("üì¶ –ó–∞–ª–∏—à–∫–∏ —ñ —Å—É–º–∞", callback_data=f"rep:stock:{tag}"),
    )
    kb.add(
        InlineKeyboardButton("üóÇ –£—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏ (–∑–≤–µ–¥–µ–Ω–Ω—è)", callback_data="rep:unique:all"),
    )
    return kb


async def cmd_reports_start(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞ —Ç–æ—á–∫–∞ –º–µ–Ω—é –∑–≤—ñ—Ç—ñ–≤. –Ø–∫—â–æ —Ç–≤–æ—î –º–µ–Ω—é —ñ–Ω—à–µ ‚Äî –ø—ñ–¥–∫–ª—é—á–∏—à —Ü—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —Ç—É–¥–∏.
    """
    user_id = message.from_user.id
    if ADMIN_IDS and user_id not in ADMIN_IDS:
        await message.reply("‚õî –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–≤—ñ—Ç—ñ–≤.")
        return

    text = "üìä –û–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç —ñ –≤—ñ–¥–¥—ñ–ª (–∞–±–æ ¬´—É—Å—ñ –≤—ñ–¥–¥—ñ–ª–∏¬ª)."
    await message.answer(text, reply_markup=_kb_reports_main(dept=None))


async def _run_and_send_report(message: types.Message, kind: str, dept_tag: str, fmt: str = "xlsx"):
    """
    –í–∏–∫–æ–Ω–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑–≤—ñ—Ç—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–∞–π–ª.
    """
    dept = None if dept_tag == "all" else dept_tag
    opts = ReportOptions(dept_id=dept, include_inactive=False, fmt=fmt, kind=kind,
                         sheet_name="–ó–≤—ñ—Ç")
    path = export_report(opts)
    await message.answer_document(types.InputFile(str(path)), caption=f"–ó–≤—ñ—Ç ¬´{kind}¬ª, –≤—ñ–¥–¥—ñ–ª: {dept or '—É—Å—ñ'}")


async def cb_report_menu(cb: types.CallbackQuery):
    """
    –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤—ñ—Ç—ñ–≤.
    –§–æ—Ä–º–∞—Ç callback_data: rep:<kind>:<dept|all>
    """
    try:
        _, kind, dept_tag = cb.data.split(":", 2)
    except Exception:
        await cb.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç", show_alert=True)
        return

    await cb.answer()
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ñ–æ—Ä–º—É—î–º–æ .xlsx
    await _run_and_send_report(cb.message, kind, dept_tag, fmt="xlsx")


# ------------------------------ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ------------------------------------

def register(dp: Dispatcher) -> None:
    """
    –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑–≤—ñ—Ç—ñ–≤.
    """
    dp.register_message_handler(cmd_reports_start, commands=["reports", "report"])
    dp.register_callback_query_handler(cb_report_menu, lambda c: c.data and c.data.startswith("rep:"))
