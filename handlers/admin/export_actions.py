"""
Admin Export/Subtract Handlers
==============================

–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—Ä—å–æ—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω—Å—å–∫–∏—Ö –¥—ñ–π:

* ``admin:export_stock`` ‚Äî –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –∑—ñ —Å–∫–ª–∞–¥—É —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ.
* ``admin:export_collected`` ‚Äî —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–Ω—è –ø–æ –≤—Å—ñ—Ö –∑—ñ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∑—ñ —Å–ø–∏—Å–∫—ñ–≤.
* ``admin:subtract_collected`` ‚Äî –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∑—ñ–±—Ä–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑—ñ —Å–∫–ª–∞–¥—É —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—ñ–≤.

–•–µ–Ω–¥–ª–µ—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Å–µ—Å—ñ—ó SQLAlchemy –¥–ª—è
–∑–±–∏—Ä–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. –î–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –∑–≤—ñ—Ç—ñ–≤ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –º–æ–¥—É–ª—å ``pandas``; –ø—Ä–∏
–≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è fallback —É CSV —Ñ–æ—Ä–º–∞—Ç.

–©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ü—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏, —ñ–º–ø–æ—Ä—Ç—É–π—Ç–µ ``router`` –∑ —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è —É ``bot.py``
—Ç–∞ –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É ``Dispatcher``:

.. code-block:: python

    from handlers.admin.export_actions import router as admin_export_router
    dp.include_router(admin_export_router)

–ê–≤—Ç–æ—Ä: –∞–≤—Ç–æ‚Äë–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä OpenAI
"""

from __future__ import annotations

import asyncio
import os
import time
from typing import Dict, List

import pandas as pd  # type: ignore
from aiogram import Bot, F, Router, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import FSInputFile

from config import ADMIN_IDS, ARCHIVES_PATH
from database.models import Product, SavedListItem
from database.session import get_session  # type: ignore
from database.orm.products import _extract_article  # type: ignore
from database.orm.archives import orm_delete_all_saved_lists_sync  # type: ignore

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ä–æ—É—Ç–µ—Ä —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
router = Router()
if ADMIN_IDS:
    router.callback_query.filter(F.from_user.id.in_(ADMIN_IDS))


def _collect_stock() -> pd.DataFrame:
    """–ó–±–∏—Ä–∞—î –ø–æ–≤–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∑–≤—ñ—Ç—É –ø–æ –∑–∞–ª–∏—à–∫–∞—Ö.

    –ü–æ–≤–µ—Ä—Ç–∞—î DataFrame –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏: ¬´–í—ñ–¥–¥—ñ–ª¬ª, ¬´–ê—Ä—Ç–∏–∫—É–ª¬ª, ¬´–ù–∞–∑–≤–∞¬ª,
    ¬´–ö—ñ–ª—å–∫—ñ—Å—Ç—å¬ª, ¬´–¶—ñ–Ω–∞¬ª, ¬´–°—É–º–∞¬ª, ¬´–ú—ñ—Å—è—Ü—ñ–≤ –±–µ–∑ —Ä—É—Ö—É¬ª.
    """
    rows: List[Dict[str, object]] = []
    with get_session() as session:
        products: List[Product] = session.query(Product).all()  # type: ignore
        for product in products:
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å, —Ü—ñ–Ω–∞ —Ç–∞ –º—ñ—Å—è—Ü—ñ –±–µ–∑ —Ä—É—Ö—É –º–æ–∂—É—Ç—å –±—É—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫—ñ–≤
            try:
                qty = float(str(product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å).replace(',', '.'))
            except Exception:
                qty = 0.0
            try:
                price = float(product.—Ü—ñ–Ω–∞ or 0.0)
            except Exception:
                price = 0.0
            try:
                months_no_move = float(product.–º—ñ—Å—è—Ü—ñ_–±–µ–∑_—Ä—É—Ö—É or 0.0)
            except Exception:
                months_no_move = 0.0
            stock_sum = qty * price
            rows.append({
                "–í—ñ–¥–¥—ñ–ª": str(product.–≤—ñ–¥–¥—ñ–ª),
                "–ê—Ä—Ç–∏–∫—É–ª": str(product.–∞—Ä—Ç–∏–∫—É–ª),
                "–ù–∞–∑–≤–∞": str(product.–Ω–∞–∑–≤–∞ or ''),
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": qty,
                "–¶—ñ–Ω–∞": price,
                "–°—É–º–∞": stock_sum,
                "–ú—ñ—Å—è—Ü—ñ–≤ –±–µ–∑ —Ä—É—Ö—É": months_no_move,
            })
    return pd.DataFrame(rows)


def _collect_collected_summary() -> pd.DataFrame:
    """–ê–≥—Ä–µ–≥—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑—ñ –≤—Å—ñ—Ö –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤.

    –ü–æ–≤–µ—Ä—Ç–∞—î DataFrame –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏: ¬´–í—ñ–¥–¥—ñ–ª¬ª, ¬´–ê—Ä—Ç–∏–∫—É–ª¬ª, ¬´–ù–∞–∑–≤–∞¬ª, ¬´–ö—ñ–ª—å–∫—ñ—Å—Ç—å¬ª.
    –Ø–∫—â–æ —Å–ø–∏—Å–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π DataFrame.
    """
    aggregated: Dict[str, Dict[str, object]] = {}
    with get_session() as session:
        # –ö–µ—à—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–º
        products_map: Dict[str, Product] = {str(p.–∞—Ä—Ç–∏–∫—É–ª): p for p in session.query(Product).all()}  # type: ignore
        saved_items: List[SavedListItem] = session.query(SavedListItem).all()  # type: ignore
        for item in saved_items:
            article = _extract_article(item.article_name)
            if not article:
                continue
            product = products_map.get(str(article))
            if not product:
                continue
            qty = float(item.quantity or 0)
            key = str(article)
            if key not in aggregated:
                aggregated[key] = {
                    "–í—ñ–¥–¥—ñ–ª": str(product.–≤—ñ–¥–¥—ñ–ª),
                    "–ê—Ä—Ç–∏–∫—É–ª": key,
                    "–ù–∞–∑–≤–∞": str(product.–Ω–∞–∑–≤–∞ or ''),
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å": qty,
                }
            else:
                aggregated[key]["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"] = float(aggregated[key]["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"]) + qty
    return pd.DataFrame(list(aggregated.values()))


async def _send_dataframe_as_document(cb: types.CallbackQuery, df: pd.DataFrame,
                                      filename_prefix: str, caption: str) -> None:
    """–ó–±–µ—Ä—ñ–≥–∞—î DataFrame –≤ Excel/CSV —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Ñ–∞–π–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.

    –Ø–∫—â–æ DataFrame –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    if df.empty:
        await cb.message.answer("‚ÑπÔ∏è –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ —Å–ø–∏—Å–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ.")
        return
    export_dir = os.path.join(ARCHIVES_PATH, "exports")
    os.makedirs(export_dir, exist_ok=True)
    timestamp = time.strftime("%d-%m-%Y_%H-%M")
    xlsx_path = os.path.join(export_dir, f"{filename_prefix}_{timestamp}.xlsx")
    csv_path = os.path.join(export_dir, f"{filename_prefix}_{timestamp}.csv")
    try:
        df.to_excel(xlsx_path, index=False)
        file_path = xlsx_path
    except Exception:
        # –Ø–∫—â–æ –∑–∞–ø–∏—Å —É Excel –Ω–µ–º–æ–∂–ª–∏–≤–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ CSV
        df.to_csv(csv_path, index=False)
        file_path = csv_path
    try:
        await cb.message.answer_document(FSInputFile(file_path), caption=caption)
    except TelegramBadRequest:
        # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
        await cb.message.answer_document(FSInputFile(file_path), caption=caption)


@router.callback_query(F.data == "admin:export_stock")
async def handle_export_stock(cb: types.CallbackQuery) -> None:
    """–í–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ –∑—ñ —Å–∫–ª–∞–¥—É —É —Ñ–∞–π–ª."""
    await cb.answer()
    df = _collect_stock()
    await _send_dataframe_as_document(cb, df, "stock", "üì¶ –ó–≤—ñ—Ç –ø–æ –∑–∞–ª–∏—à–∫–∞—Ö —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ")


@router.callback_query(F.data == "admin:export_collected")
async def handle_export_collected(cb: types.CallbackQuery) -> None:
    """–§–æ—Ä–º—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–≤–µ–¥–µ–Ω–Ω—è –ø–æ –∑—ñ–±—Ä–∞–Ω–æ–º—É."""
    await cb.answer()
    df = _collect_collected_summary()
    await _send_dataframe_as_document(cb, df, "collected_summary", "üóÇ –ó–≤—ñ—Ç –ø–æ –∑—ñ–±—Ä–∞–Ω–æ–º—É —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ")


@router.callback_query(F.data == "admin:subtract_collected")
async def handle_subtract_collected(cb: types.CallbackQuery) -> None:
    """–í—ñ–¥–Ω—ñ–º–∞—î –∑—ñ–±—Ä–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∑—ñ —Å–∫–ª–∞–¥—É —Ç–∞ –æ—á–∏—â—É—î –∞—Ä—Ö—ñ–≤–∏."""
    await cb.answer()
    df = _collect_collected_summary()
    if df.empty:
        await cb.message.answer("‚ÑπÔ∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è.")
        return
    loop = asyncio.get_running_loop()
    summary_lines: List[str] = []
    try:
        # –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        def subtract() -> int:
            updated_count = 0
            with get_session() as session:
                for _, row in df.iterrows():
                    dept_id = str(row["–í—ñ–¥–¥—ñ–ª"])
                    article = str(row["–ê—Ä—Ç–∏–∫—É–ª"])
                    qty_to_subtract = float(row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å"] or 0)
                    product: Product = session.query(Product).filter(
                        Product.dept_id == dept_id,
                        Product.article == article,
                    ).one_or_none()  # type: ignore
                    if not product:
                        summary_lines.append(f"‚Ä¢ {dept_id}:{article}: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                        continue
                        
                    # –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–º–æ–∂–µ –±—É—Ç–∏ —Ä—è–¥–∫–æ–º)
                    try:
                        before = float(str(product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å).replace(',', '.'))
                    except Exception:
                        before = 0.0
                    after = before - qty_to_subtract
                    if after < 0:
                        after = 0.0
                    product.–∫—ñ–ª—å–∫—ñ—Å—Ç—å = after
                    updated_count += 1
                    summary_lines.append(
                        f"‚Ä¢ {dept_id}:{article}: {before:.2f} ‚àí {qty_to_subtract:.2f} ‚Üí <b>{after:.2f}</b>"
                    )
                session.commit()
            return updated_count
        updated = await loop.run_in_executor(None, subtract)
    except Exception as exc:
        await cb.message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—ñ –∑—ñ–±—Ä–∞–Ω–∏—Ö –∑–∞–ª–∏—à–∫—ñ–≤: {exc}")
        return
    # –û—á–∏—â–∞—î–º–æ –∞—Ä—Ö—ñ–≤–∏
    try:
        removed = await loop.run_in_executor(None, orm_delete_all_saved_lists_sync)
    except Exception:
        removed = 0
    report = ["üìâ <b>–í—ñ–¥–Ω—è—Ç–æ –∑—ñ–±—Ä–∞–Ω–µ –∑—ñ —Å–∫–ª–∞–¥—É</b>"]
    if updated:
        report.extend(summary_lines)
        report.append("")
        report.append(f"–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ: <b>{updated}</b> –ø–æ–∑–∏—Ü—ñ–π.")
    else:
        report.append("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è.")
    report.append(f"–ê—Ä—Ö—ñ–≤–∏ –æ—á–∏—â–µ–Ω–æ: <b>{removed}</b> —Å–ø–∏—Å–∫—ñ–≤.")
    await cb.message.answer("\n".join(report), parse_mode="HTML")