#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–¥–º—ñ–Ω—Å—å–∫—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö (Excel/ODS/CSV) —ñ–∑ dry‚Äërun —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º.

–¶—è –≤–µ—Ä—Å—ñ—è –¥–æ–ø–æ–≤–Ω–µ–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–Ω–æ–ø–∫–∏ ¬´üì• –Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Excel¬ª —É –∞–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—ñ.
–ö–æ–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Ç–∏—Å–∫–∞—î —Ü—é –∫–Ω–æ–ø–∫—É, –±–æ—Ç –ø–æ–∫–∞–∑—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —â–æ–¥–æ —ñ–º–ø–æ—Ä—Ç—É —Ç–∞
–ø—Ä–æ–ø–æ–Ω—É—î –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª. –ü–æ–¥–∞–ª—å—à–∞ –ª–æ–≥—ñ–∫–∞ —ñ–º–ø–æ—Ä—Ç—É (dry‚Äërun —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è)
—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –Ω–∏–∂—á–µ.

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
 - –ü—Ä–∏–π–æ–º —Ñ–∞–π–ª—É –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (xlsx/xlsm/ods/csv)
 - –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ (utils/import_normalizer.py)
 - Dry‚Äërun: –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞–Ω–∏—Ö/–æ–Ω–æ–≤–ª–µ–Ω–∏—Ö/–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏—Ö, —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞—Ä—Ç–∏–∫—É–ª—ñ–≤,
   —Å—É–º –ø–æ –≤—ñ–¥–¥—ñ–ª–∞–º
 - –ó–∞–ø–æ–±—ñ–∂–Ω–∏–∫: —è–∫—â–æ —É —Ñ–∞–π–ª—ñ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –ñ–û–î–ù–û–ì–û –∞—Ä—Ç–∏–∫—É–ª–∞ ‚Äî —ñ–º–ø–æ—Ä—Ç
   —Å–∫–∞—Å–æ–≤—É—î—Ç—å—Å—è, –ë–î –Ω–µ —á—ñ–ø–∞—î—Ç—å—Å—è
 - –ü–æ—Ä—ñ–≥ ¬´–º–∞—Å–æ–≤–æ—ó –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó¬ª (–≤—ñ–¥–Ω–æ—Å–Ω–∏–π) –∑ .env; —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ ‚Äî
   –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é –Ω–µ –≤–∏–∫–æ–Ω—É—î–º–æ (—Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ)
 - –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É —á–µ—Ä–µ–∑ inline‚Äë–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
 - –ó–≤—ñ—Ç –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è

–î–æ–¥–∞–Ω–æ: –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è admin:import_products, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ
–∫–Ω–æ–ø–∫–∏ ¬´–Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Excel¬ª —É –∞–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—ñ. –í—ñ–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –π
–ø—Ä–æ–ø–æ–Ω—É—î –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—ñ.

"""

from __future__ import annotations

import json
import logging
import os
import time
from dataclasses import asdict, dataclass, field
from pathlib import Path
from typing import Dict, List, Optional, Tuple

import pandas as pd
from aiogram import Bot, types, Dispatcher, F  # Dispatcher imported from aiogram root in v3
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# ------------------------------ –ö–û–ù–§–Ü–ì ---------------------------------------

load_dotenv(override=True)
logger = logging.getLogger(__name__)

IMPORTS_DIR = Path(os.getenv("IMPORTS_DIR", "imports")).resolve()
PLANS_DIR = IMPORTS_DIR / "_plans"
PLANS_DIR.mkdir(parents=True, exist_ok=True)

# –ü–æ—Ä—ñ–≥ –º–∞—Å–æ–≤–æ—ó –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó (—á–∞—Å—Ç–∫–∞ –≤—ñ–¥ 0 –¥–æ 1). –Ø–∫—â–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é –±—ñ–ª—å—à–µ ‚Äî –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é –≤—ñ–¥—Ä—É–±–∏–º–æ.
MAX_DEACTIVATE_SHARE = float(os.getenv("IMPORT_MAX_DEACTIVATE_SHARE", "0.5"))

# –ß–∏ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ —ñ–º–ø–æ—Ä—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–∞–∫)
DEACTIVATE_MISSING = os.getenv("IMPORT_DEACTIVATE_MISSING", "1") in ("1", "true", "True", "yes", "YES")

# –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è, —è–∫—ñ –¥–æ–∑–≤–æ–ª–µ–Ω–æ
ALLOWED_EXT = {".xlsx", ".xlsm", ".ods", ".csv"}

# –ö–æ–º—É –¥–æ–∑–≤–æ–ª–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç (—Å–ø–∏—Å–æ–∫ ID —á–µ—Ä–µ–∑ –∫–æ–º—É). –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ ‚Äî –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ ADMIN_IDS.
ADMIN_IDS_ENV = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = set(int(x) for x in ADMIN_IDS_ENV.replace(" ", "").split(",") if x.strip().isdigit())


# ---------------------- –Ü–ú–ü–û–†–¢–ò –£–¢–ò–õ–Ü–¢ –ù–û–†–ú–ê–õ–Ü–ó–ê–¶–Ü–á -------------------------

from utils.io_spreadsheet import read_any_spreadsheet
from utils.import_normalizer import normalize_import_table, NoArticlesError

# ----------------------------- ORM –Ü –°–ï–°–Ü–á -----------------------------------
# –ü—ñ–¥–ª–∞—à—Ç—É–π –ø—ñ–¥ —Å–≤—ñ–π –ø—Ä–æ—î–∫—Ç:

try:
    # –í–∞—Ä—ñ–∞–Ω—Ç 1: —É —Ç–µ–±–µ —î —Ç–∞–∫—ñ –º–æ–¥—É–ª—ñ
    from database.orm.products import Product  # type: ignore
    from database.session import get_session   # type: ignore
except Exception:
    # –í–∞—Ä—ñ–∞–Ω—Ç 2: –∑–∞–ø–∞—Å–Ω—ñ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω—å (–≤–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ)
    class Product:  # type: ignore
        pass

    def get_session():  # type: ignore
        raise RuntimeError("–ü—ñ–¥–∫–ª—é—á–∏ get_session() —ñ Product –∑ —Ç–≤–æ—î—ó ORM.")


# ----------------------------- –î–ê–¢–ê–ö–õ–ê–°–ò –ü–õ–ê–ù–£ -------------------------------

@dataclass
class PlanItem:
    article: str
    dept_id: str
    name: Optional[str] = None
    qty: Optional[float] = None
    price: Optional[float] = None
    months_no_move: Optional[float] = None


@dataclass
class ImportPlan:
    """
    –ü–ª–∞–Ω –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –Ω–∞ –¥–∏—Å–∫—É –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    token: str
    # –°–ø–∏—Å–∫–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π
    to_insert: List[PlanItem] = field(default_factory=list)
    to_update: List[PlanItem] = field(default_factory=list)
    # –ü–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö, —è–∫–∏—Ö —Ç–æ—Ä–∫–∞—î—Ç—å—Å—è —ñ–º–ø–æ—Ä—Ç
    involved_depts: List[str] = field(default_factory=list)
    # –ö–∞–Ω–¥–∏–¥–∞—Ç–∏ –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é (–∞—Ä—Ç–∏–∫—É–ª+–≤—ñ–¥–¥—ñ–ª —ñ—Å–Ω—É–≤–∞–ª–∏ –≤ –ë–î, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ —É —Ñ–∞–π–ª—ñ)
    to_deactivate: List[Tuple[str, str]] = field(default_factory=list)  # (article, dept_id)
    # –ü—Ä–∞–ø–æ—Ä–µ—Ü—å: –∑—Ä—ñ–∑–∞—Ç–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é, —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ø–æ—Ä—ñ–≥
    deactivate_allowed: bool = True
    # –ö–æ—Ä–∏—Å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats: Dict[str, float] = field(default_factory=dict)
    # –õ—é–¥—è–Ω–∏–π –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    human_report: str = ""

    def to_json(self) -> dict:
        return {
            "token": self.token,
            "to_insert": [asdict(x) for x in self.to_insert],
            "to_update": [asdict(x) for x in self.to_update],
            "involved_depts": self.involved_depts,
            "to_deactivate": list(self.to_deactivate),
            "deactivate_allowed": self.deactivate_allowed,
            "stats": self.stats,
            "human_report": self.human_report,
        }

    @staticmethod
    def from_json(d: dict) -> "ImportPlan":
        plan = ImportPlan(
            token=d["token"],
            to_insert=[PlanItem(**x) for x in d.get("to_insert", [])],
            to_update=[PlanItem(**x) for x in d.get("to_update", [])],
            involved_depts=d.get("involved_depts", []),
            to_deactivate=[tuple(x) for x in d.get("to_deactivate", [])],
            deactivate_allowed=d.get("deactivate_allowed", True),
            stats=d.get("stats", {}),
            human_report=d.get("human_report", ""),
        )
        return plan


# ------------------------------ –î–û–ü–û–ú–û–ñ–ù–Ü ------------------------------------

def is_admin(user: types.User) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∞–≤–æ –Ω–∞ —ñ–º–ø–æ—Ä—Ç."""
    if ADMIN_IDS and user.id in ADMIN_IDS:
        return True
    # –Ø–∫—â–æ ADMIN_IDS –ø–æ—Ä–æ–∂–Ω—ñ–π, —ñ–º–æ–≤—ñ—Ä–Ω–æ —É —Ç–µ–±–µ —î —ñ–Ω—à–∏–π –≥–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –ø—Ä–∞–≤.
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ —Ç–∏–º, —Ö—Ç–æ —É ADMIN_IDS.
    return bool(ADMIN_IDS)


def _short_token() -> str:
    """–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è callback_data (64 –±–∞–π—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è)."""
    return hex(int(time.time() * 1000))[2:][-8:]


def _save_plan(plan: ImportPlan) -> Path:
    p = PLANS_DIR / f"{plan.token}.json"
    with p.open("w", encoding="utf-8") as f:
        json.dump(plan.to_json(), f, ensure_ascii=False, indent=2)
    return p


def _load_plan(token: str) -> ImportPlan:
    p = PLANS_DIR / f"{token}.json"
    if not p.exists():
        raise FileNotFoundError("–ü–ª–∞–Ω —ñ–º–ø–æ—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π.")
    with p.open("r", encoding="utf-8") as f:
        data = json.load(f)
    return ImportPlan.from_json(data)


def _humanize_report(stats: Dict[str, float],
                      ins: int, upd: int, deact: int, deact_allowed: bool,
                      per_dept: Dict[str, Dict[str, float]]) -> str:
    lines = []
    lines.append("üì• <b>Dry-run —ñ–º–ø–æ—Ä—Ç—É</b>")
    lines.append("")
    lines.append(f"‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞—Ä—Ç–∏–∫—É–ª—ñ–≤ —É —Ñ–∞–π–ª—ñ: <b>{int(stats.get('articles_unique', 0))}</b>")
    lines.append(f"‚Ä¢ –†—è–¥–∫—ñ–≤ —É —Ñ–∞–π–ª—ñ: <b>{int(stats.get('rows_total', 0))}</b>")
    lines.append("")
    lines.append(f"‚úÖ –î–æ–¥–∞—Ç–∏: <b>{ins}</b>")
    lines.append(f"üîÅ –û–Ω–æ–≤–∏—Ç–∏: <b>{upd}</b>")
    if DEACTIVATE_MISSING:
        deact_line = f"üóÇ –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ (–Ω–µ —É —Ñ–∞–π–ª—ñ): <b>{deact}</b>"
        if not deact_allowed and deact > 0:
            deact_line += "  <i>(–ø–æ—Ä–æ–≥ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ, –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é –≤–∏–º–∫–Ω–µ–Ω–æ)</i>"
        lines.append(deact_line)
    else:
        lines.append("üóÇ –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏: <i>–≤–∏–º–∫–Ω–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º</i>")
    lines.append("")
    if per_dept:
        lines.append("<b>–°—É–º–∏ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö:</b>")
        for dept, d in sorted(per_dept.items(), key=lambda x: str(x[0])):
            s = f"  ‚Ä¢ –í—ñ–¥–¥—ñ–ª {dept}: —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∞—Ä—Ç–∏–∫—É–ª—ñ–≤ ‚Äî {int(d.get('unique', 0))}, —Å—É–º–∞ ‚Äî {d.get('sum', 0):.2f}"
            lines.append(s)
    return "\n".join(lines)


def _kb_confirm(token: str) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É.

    –£ aiogram¬†3.x –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ ``inline_keyboard`` –ø—ñ–¥ —á–∞—Å
    —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ``InlineKeyboardMarkup``, —ñ–Ω–∞–∫—à–µ –≤–∏–Ω–∏–∫–∞—î –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∞ –ø–æ–º–∏–ª–∫–∞.
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç",
                    callback_data=f"imp_apply:{token}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                    callback_data=f"imp_cancel:{token}"
                ),
            ]
        ]
    )


# ------------------------------ –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê --------------------------------

def _prepare_import_plan(df: pd.DataFrame) -> ImportPlan:
    """
    –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –ø–ª–∞–Ω —ñ–º–ø–æ—Ä—Ç—É: —â–æ –¥–æ–¥–∞—Ç–∏, —â–æ –æ–Ω–æ–≤–∏—Ç–∏, —â–æ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏.
    –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–∞—Ö—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–æ —Ç–∏—Ö –≤—ñ–¥–¥—ñ–ª–∞—Ö, —è–∫—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ —É —Ñ–∞–π–ª—ñ.
    """
    token = _short_token()
    plan = ImportPlan(token=token)

    # –Ø–∫—ñ –≤—ñ–¥–¥—ñ–ª–∏ –≤ —ñ–º–ø–æ—Ä—Ç—ñ
    if "–≤—ñ–¥–¥—ñ–ª" in df.columns:
        involved_depts = sorted(set(str(x) for x in df["–≤—ñ–¥–¥—ñ–ª"].dropna().astype(str).tolist()))
    else:
        involved_depts = ["unknown"]
    plan.involved_depts = involved_depts

    # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω—å
    df["__key"] = df.apply(lambda r: f"{str(r.get('–≤—ñ–¥–¥—ñ–ª', 'unknown'))}::{str(r['–∞—Ä—Ç–∏–∫—É–ª'])}", axis=1)

    # –ê–≥—Ä–µ–≥–∞—Ç–∏ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö
    per_dept: Dict[str, Dict[str, float]] = {}
    for dept in involved_depts:
        sub = df[df.get("–≤—ñ–¥–¥—ñ–ª", "unknown").astype(str) == dept]
        unique = int(sub["–∞—Ä—Ç–∏–∫—É–ª"].dropna().astype(str).nunique()) if "–∞—Ä—Ç–∏–∫—É–ª" in sub.columns else 0
        total_sum = float(sub.get("—Å—É–º–∞", pd.Series(dtype=float)).fillna(0).astype(float).sum()) if "—Å—É–º–∞" in sub.columns else 0.0
        per_dept[dept] = {"unique": float(unique), "sum": float(total_sum)}

    # –ó—á–∏—Ç–∞—î–º–æ —Å—Ç–∞–Ω –ë–î
    with get_session() as s:
        # –£—Å–µ, —â–æ —É –≤—ñ–¥–¥—ñ–ª–∞—Ö –∑ —ñ–º–ø–æ—Ä—Ç—É
        db_items = s.query(Product).filter(Product.dept_id.in_(involved_depts)).all()  # type: ignore
        db_map: Dict[str, Product] = {f"{str(p.dept_id)}::{str(p.article)}": p for p in db_items}

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –≤—Å—Ç–∞–≤–∫–∏/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    to_insert: List[PlanItem] = []
    to_update: List[PlanItem] = []

    def _row2item(row: pd.Series) -> PlanItem:
        return PlanItem(
            article=str(row.get("–∞—Ä—Ç–∏–∫—É–ª")),
            dept_id=str(row.get("–≤—ñ–¥–¥—ñ–ª", "unknown")),
            name=str(row.get("–Ω–∞–∑–≤–∞")) if not pd.isna(row.get("–Ω–∞–∑–≤–∞")) else None,
            qty=float(row.get("–∫—ñ–ª—å–∫—ñ—Å—Ç—å")) if "–∫—ñ–ª—å–∫—ñ—Å—Ç—å" in row and not pd.isna(row.get("–∫—ñ–ª—å–∫—ñ—Å—Ç—å")) else None,
            price=float(row.get("—Ü—ñ–Ω–∞")) if "—Ü—ñ–Ω–∞" in row and not pd.isna(row.get("—Ü—ñ–Ω–∞")) else None,
            months_no_move=float(row.get("–º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑ —Ä—É—Ö—É")) if "–º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑ —Ä—É—Ö—É" in row and not pd.isna(row.get("–º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑ —Ä—É—Ö—É")) else None,
        )

    for _, row in df.iterrows():
        key = row["__key"]
        if key in db_map:
            to_update.append(_row2item(row))
        else:
            to_insert.append(_row2item(row))

    # –ö–∞–Ω–¥–∏–¥–∞—Ç–∏ –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é: —Ç–µ, —â–æ —î –≤ –ë–î —É —Ü–∏—Ö –≤—ñ–¥–¥—ñ–ª–∞—Ö, –∞–ª–µ –Ω–µ–º–∞ —É —Ñ–∞–π–ª—ñ
    imported_keys = set(df["__key"].tolist())
    to_deactivate: List[Tuple[str, str]] = []
    for key, item in db_map.items():
        if key not in imported_keys and DEACTIVATE_MISSING:
            to_deactivate.append((str(item.article), str(item.dept_id)))

    # –ü–æ—Ä—ñ–≥ –º–∞—Å–æ–≤–æ—ó –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    deactivate_allowed = True
    total_db_involved = len(db_map) or 1  # —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å
    share = len(to_deactivate) / float(total_db_involved)
    if share > MAX_DEACTIVATE_SHARE:
        deactivate_allowed = False

    # –ü–∞–∫—É—î–º–æ
    plan.to_insert = to_insert
    plan.to_update = to_update
    plan.to_deactivate = to_deactivate
    plan.deactivate_allowed = deactivate_allowed
    plan.stats = {"rows_total": float(len(df)), "articles_unique": float(df["–∞—Ä—Ç–∏–∫—É–ª"].nunique())}
    plan.human_report = _humanize_report(plan.stats, len(to_insert), len(to_update), len(to_deactivate), deactivate_allowed, per_dept)

    return plan


# ----------------------------- –•–ï–ù–î–õ–ï–†–ò TG -----------------------------------

async def _handle_import_file(message: types.Message, bot: Bot) -> None:
    """
    –ü—Ä–∏–π–º–∞—î –¥–æ–∫—É–º–µ–Ω—Ç –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞, –∑–±–µ—Ä—ñ–≥–∞—î —É ./imports, —Ä–æ–±–∏—Ç—å dry-run, –ø–æ–∫–∞–∑—É—î –∑–≤—ñ—Ç —ñ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.
    """
    if not message.document:
        return

    if not is_admin(message.from_user):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —ñ–º–ø–æ—Ä—Ç.")
        return

    file_name = message.document.file_name or "upload"
    ext = Path(file_name).suffix.lower()
    if ext not in ALLOWED_EXT:
        await message.reply("–§–æ—Ä–º–∞—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –î–æ–∑–≤–æ–ª–µ–Ω–æ: .xlsx, .xlsm, .ods, .csv")
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —É imports/
    IMPORTS_DIR.mkdir(parents=True, exist_ok=True)
    ts = time.strftime("%d.%m.%Y_%H.%M")
    saved_path = IMPORTS_DIR / f"import_{ts}{ext}"

    file = await bot.get_file(message.document.file_id)
    await bot.download_file(file.file_path, destination=saved_path)

    # –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —ñ –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏
    try:
        # read_any_spreadsheet expects a string path; convert Path to str
        raw_df = read_any_spreadsheet(str(saved_path))
        norm = normalize_import_table(raw_df).require_any_articles()
    except NoArticlesError:
        await message.answer("‚ö†Ô∏è –Ü–º–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —É —Ñ–∞–π–ª—ñ.\n"
                             "–ë–∞–∑—É –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ.")
        logger.warning("Import canceled: no articles.")
        return
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è/–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó —ñ–º–ø–æ—Ä—Ç—É: %s", e)
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∞–±–æ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó.\n"
                             "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ —ñ —Ñ–æ—Ä–º–∞—Ç.")
        return

    # –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –ø–ª–∞–Ω dry-run
    plan = _prepare_import_plan(norm.df)

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é ‚Äî –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏
    if not plan.to_insert and not plan.to_update and not (DEACTIVATE_MISSING and plan.to_deactivate):
        await message.answer("‚ÑπÔ∏è –£ —Ñ–∞–π–ª—ñ –Ω–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è. –ë–∞–∑—É –Ω–µ –∑–º—ñ–Ω—é—é.")
        return

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–ª–∞–Ω
    _save_plan(plan)

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–≤—ñ—Ç —ñ –∫–Ω–æ–ø–∫–∏
    await message.answer(
        plan.human_report,
        parse_mode="HTML",
        reply_markup=_kb_confirm(plan.token)
    )


async def _cb_apply_import(cb: types.CallbackQuery) -> None:
    """
    –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ä–∞–Ω—ñ—à–µ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π –ø–ª–∞–Ω —ñ–º–ø–æ—Ä—Ç—É.
    """
    if not is_admin(cb.from_user):
        await cb.answer("–ù–µ–º–∞—î –ø—Ä–∞–≤.", show_alert=True)
        return

    token = cb.data.split(":", 1)[1]
    try:
        plan = _load_plan(token)
    except Exception:
        await cb.answer("–ü–ª–∞–Ω —ñ–º–ø–æ—Ä—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–≤.", show_alert=True)
        return

    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É
    try:
        ins_cnt = upd_cnt = deact_cnt = 0
        with get_session() as s:
            # –Ü–Ω–¥–µ–∫—Å–∏ —ñ—Å–Ω—É—é—á–∏—Ö
            existing: Dict[Tuple[str, str], Product] = {}
            q = s.query(Product).filter(Product.dept_id.in_(plan.involved_depts))
            for p in q.all():  # type: ignore
                existing[(str(p.article), str(p.dept_id))] = p

            # INSERT
            for it in plan.to_insert:
                key = (it.article, it.dept_id)
                if key in existing:
                    # –ø–∞—Ä–∞–Ω–æ—è: —è–∫—â–æ —Ä–∞–ø—Ç–æ–º –∑'—è–≤–∏–≤—Å—è –∑–∞ —á–∞—Å dry-run ‚Üí –≤ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                    p = existing[key]
                    if it.name is not None:
                        p.name = it.name
                    if it.qty is not None:
                        p.qty = it.qty
                    if it.price is not None:
                        p.price = it.price
                    if it.months_no_move is not None:
                        p.months_no_move = it.months_no_move
                    p.active = True  # –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
                    upd_cnt += 1
                else:
                    p = Product()  # type: ignore
                    p.article = it.article
                    p.dept_id = it.dept_id
                    p.name = it.name or ""
                    p.qty = it.qty or 0
                    p.price = it.price or 0
                    p.months_no_move = it.months_no_move or 0
                    p.active = True
                    s.add(p)
                    ins_cnt += 1

            # UPDATE
            for it in plan.to_update:
                key = (it.article, it.dept_id)
                p = existing.get(key)
                if not p:
                    # —Ö—Ç–æ—Å—å –≤–∏–¥–∞–ª–∏–≤ –º—ñ–∂ dry-run —ñ apply ‚Äî –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ –Ω–∞ insert
                    p = Product()  # type: ignore
                    p.article = it.article
                    p.dept_id = it.dept_id
                    p.active = True
                    s.add(p)
                    ins_cnt += 1
                # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
                if it.name is not None:
                    p.name = it.name
                if it.qty is not None:
                    p.qty = it.qty
                if it.price is not None:
                    p.price = it.price
                if it.months_no_move is not None:
                    p.months_no_move = it.months_no_move
                p.active = True

            # DEACTIVATE
            if DEACTIVATE_MISSING and plan.deactivate_allowed and plan.to_deactivate:
                for art, dept in plan.to_deactivate:
                    p = existing.get((art, dept))
                    if p and getattr(p, "active", True):
                        p.active = False
                        deact_cnt += 1

            s.commit()

        msg = [
            "‚úÖ <b>–Ü–º–ø–æ—Ä—Ç –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ</b>",
            f"‚Ä¢ –î–æ–¥–∞–Ω–æ: <b>{ins_cnt}</b>",
            f"‚Ä¢ –û–Ω–æ–≤–ª–µ–Ω–æ: <b>{upd_cnt}</b>",
        ]
        if DEACTIVATE_MISSING:
            if plan.deactivate_allowed:
                msg.append(f"‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: <b>{deact_cnt}</b>")
            else:
                msg.append("‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: <i>–ø—Ä–æ–ø—É—â–µ–Ω–æ (–ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ø–æ—Ä—ñ–≥ –º–∞—Å–æ–≤–æ—ó –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó)</i>")
        await cb.message.edit_text("\n".join(msg), parse_mode="HTML")
        await cb.answer("–ì–æ—Ç–æ–≤–æ")
    except Exception as e:
        logger.exception("–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É –≤–ø–∞–ª–æ: %s", e)
        await cb.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É", show_alert=True)


async def _cb_cancel_import(cb: types.CallbackQuery) -> None:
    token = cb.data.split(":", 1)[1]
    try:
        p = PLANS_DIR / f"{token}.json"
        if p.exists():
            p.unlink()
    except Exception:
        pass
    try:
        await cb.message.edit_text("‚ùé –Ü–º–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    except Exception:
        pass
    await cb.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ")


# ------------------------ –ù–û–í–ò–ô –•–ï–ù–î–õ–ï–† –ö–ù–û–ü–ö–ò –Ü–ú–ü–û–†–¢–£ -----------------------

async def cb_import_products_start(cb: types.CallbackQuery) -> None:
    """
    Handler for the admin menu button 'Import products from Excel'.

    When the administrator presses the ¬´üì• –Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Excel¬ª button, this
    handler sends a message with instructions on how to upload a spreadsheet
    and provides a back button to return to the admin panel.
    """
    if not is_admin(cb.from_user):
        await cb.answer("–ù–µ–º–∞—î –ø—Ä–∞–≤.", show_alert=True)
        return

    # Inline keyboard with a 'back to admin panel' button
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main")]
        ]
    )

    await cb.message.edit_text(
        "üìÇ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª Excel/ODS/CSV –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤.\n"
        "–§–∞–π–ª –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: –∞—Ä—Ç–∏–∫—É–ª, –≤—ñ–¥–¥—ñ–ª, –Ω–∞–∑–≤–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Ü—ñ–Ω–∞, –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑ —Ä—É—Ö—É.\n\n"
        "–ü—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–æ—Ç –ø–æ–∫–∞–∂–µ dry-run —ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∑–≤—ñ—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
        reply_markup=kb
    )
    await cb.answer()


# ----------------------------- –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø ------------------------------------

def register(dp: Dispatcher) -> None:
    """
    –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ —ñ–º–ø–æ—Ä—Ç—É.
    - –î–æ–∫—É–º–µ–Ω—Ç–∏ –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ–≤ —ñ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .xlsx/.xlsm/.ods/.csv ‚Äî —Ç—Ä–∏–≥–µ—Ä dry-run
    - Callback –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    - Callback –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫—É —ñ–º–ø–æ—Ä—Ç—É –∑ –∞–¥–º—ñ–Ω‚Äë–ø–∞–Ω–µ–ª—ñ
    """
    # –ü—Ä–∏–π–æ–º –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–±—É–¥—å-—è–∫–∏–π —á–∞—Ç), –∞–ª–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—é
    async def on_document(message: types.Message):
        """
        Handle incoming documents. If the document has an allowed extension, trigger a dry-run import.
        """
        doc: types.Document = message.document
        name = (doc.file_name or "").lower()
        if not any(name.endswith(ext) for ext in ALLOWED_EXT):
            return  # not our format
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ message.bot –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ Bot
        await _handle_import_file(message, message.bot) 
        
    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è v3 API: dp.message.register –∑ F-—Ñ—ñ–ª—å—Ç—Ä–æ–º ContentType
    dp.message.register(on_document, F.content_type == types.ContentType.DOCUMENT)

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É
    dp.callback_query.register(
        _cb_apply_import,
        F.data.startswith("imp_apply:")
    )
    dp.callback_query.register(
        _cb_cancel_import,
        F.data.startswith("imp_cancel:")
    )

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ –∑ Excel¬ª —É –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    dp.callback_query.register(
        cb_import_products_start,
        F.data == "admin:import_products"
    )